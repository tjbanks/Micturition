{load_file("nrngui.hoc")}
{load_file("PUD_TEMPLATE.hoc")}
{load_file("MPG_TEMPLATE.hoc")}
{load_file("HG_TEMPLATE.hoc")}
//{load_file("graphics_lib.hoc")}

v_init = -53.5

objref pc
pc = new ParallelContext()

objref synmpgb[250], synhgb[250], synmpgg[25], synhgg[25], synhge[25], synpud[25], synmpge[25],cells ,cellid, nc, nclist, cell[625], nil
objref ncmpgbg[250], objref nchgbg[250], objref ncmpgge[25], objref nchgge[25], objref spd[25], objref shg[250], objref spg[250], objref nchggmpge[25] 
objref ncmpggmpge[25], objref ncpudmpge[25], objref ncpudmogei[25], objref ncspdpud[25], objref ncspgmpgb[250], objref ncshghgb[250], ncmpgempgg[250]

NCELL = 625

nclist = new List()
cells = new List()

tstop = 30000 // in ms
dt = 0.05

for(i=pc.id;i<NCELL;i+=pc.nhost) {   // Distribute the cells evenly among nodes

if (i < 300) {							// Cells 0-299 will be MPG, 300-599 will be HG, 600-624 will be PUD
	cell = new MPG()               	   // Create a cell
	cells.append(cell)                     // Add this cell to the list (otherwise its lost!)
	pc.set_gid2node(i, pc.id)   		  // Associate “i” with this node id
	nc = cell.connect2target(nil) 				//attach spike detector $
	nc.delay = 1
	nc.weight = 1
	pc.cell(i, nc)	//associate gid i with spike detector
	printf("\ncell_number%d",i)
	printf("\ncreated_on%d",pc.id)	

} else if (i < 600) {
	cell = new HG()               	   // Create a cell
	cells.append(cell)                     // Add this cell to the list (otherwise its lost!)
	pc.set_gid2node(i, pc.id)   		  // Associate “i” with this node id
	nc = cell.connect2target(nil) 				//attach spike detector $
	nc.delay = 1
	nc.weight = 1
	pc.cell(i, nc)	//associate gid i with spike detector
	printf("\ncell_number%d",i)
	printf("\ncreated_on%d",pc.id)	
	
}	else {
	cell = new PUD()               	   // Create a cell
	cells.append(cell)                     // Add this cell to the list (otherwise its lost!)
	pc.set_gid2node(i, pc.id)   		  // Associate “i” with this node id
	nc = cell.connect2target(nil) 				//attach spike detector $
	nc.delay = 1
	nc.weight = 1
	pc.cell(i, nc)	//associate gid i with spike detector
	printf("\ncell_number%d",i)
	printf("\ncreated_on%d",pc.id)	
	}
} 

k=0
///////////connection MPGB to MPGA/////////////////

for m = 0, 24 {   
	for n = (0+m*10), (9+m*10)  {
	l = (m + 250)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma synmpgb[n] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,synmpgb[n])
		nc.delay = 1
		nc.weight = .1
		nclist.append(nc)
		k=k+1
	}
}

///////////Feedback connection MPGE to MPGB/////////////////

for m = 0, 24 { 
	l = (m + 275)
	if(!pc.gid_exists(l)) { continue } 
		cellid = pc.gid2cell(l)
		cellid.soma ncmpgempgg[m] = new Exp2Syn(0.9) 

for n = (0+m*10), (9+m*10)  {
	nc = pc.gid_connect( n,ncmpgempgg[m])
	nc.delay = 1
	nc.weight = .1
	nclist.append(nc)
	k=k+1
	}
}

///////////connection HGB to HGA/////////////////

for m = 0, 24 {   
	for n = (300+m*10), (309+m*10)  {
		l = (m + 550)
		if(!pc.gid_exists(n)) { continue } 
			cellid = pc.gid2cell(n)
			cellid.soma synhgb[n-300] = new Exp2Syn(0.9) 
			nc = pc.gid_connect( l,synhgb[n-300])
			nc.delay = 1
			nc.weight = .1
			nclist.append(nc)
			k=k+1
		}
	}

///////////connection MPGA to MPGE/////////////////

for m = 0, 24 {   
	n = (m + 250)
	l = (m + 275)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma synmpgg[m] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,synmpgg[m])
		nc.delay = 1
		nc.weight = .1
		nclist.append(nc)
		k=k+1
	}

///////////connection HGA to HGE/////////////////

for m = 0, 24 {   
	n = (m + 550)
	l = (m + 575)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma synhgg[m] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,synhgg[m])
		nc.delay = 1
		nc.weight = .1
		nclist.append(nc)
		k=k+1
	}

///////////connection HGA to MPGE/////////////////

for m = 0, 24 {   
	n = (m + 550)
	l = (m + 275)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma nchggmpge[m] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,nchggmpge[m])
		nc.delay = 1
		nc.weight = -0.5
		nclist.append(nc)
		k=k+1
	}

///////////connection PUD to MPGE ex/////////////////

for m = 0, 24 {   
	n = (m + 600)
	l = (m + 275)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma ncpudmpge[m] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,ncpudmpge[m])
		nc.delay = 1
		nc.weight = .2
		nclist.append(nc)
		k=k+1
	}

///////////connection PUD to MPGE inhib/////////////////

for m = 0, 24 {   
	n = (m + 600)
	l = (m + 275)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma ncpudmogei[m] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,ncpudmogei[m])
		nc.delay = 1
		nc.weight = -1
		nclist.append(nc)
		k=k+1
	}

///////////connection Stimulators to HGB/////////////////

for m = 0, 249 {   
	n=m+300
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma shg[m] = new NetStimNEWh(0.9)
		nc = pc.gid_connect( n,shg[m])
		nc.delay = 1
		nc.weight = 1
		nclist.append(nc)
		k=k+1
	}

///////////connection Stimulators to MPGB/////////////////

for m = 0, 249 {   
	if(!pc.gid_exists(m)) { continue } 
		cellid = pc.gid2cell(m)
		cellid.soma spg[m] = new NetStimNEWp(0.9)
		nc = pc.gid_connect( m,spg[m])
		nc.delay = 1
		nc.weight = 1
		nclist.append(nc)
		k=k+1
	}

///////////connection Stimulators to PUD/////////////////

for m = 0, 24 {   
	n = (m + 600)
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma spd[m] = new NetStimNEWpud(0.9)
		nc = pc.gid_connect( n,spd[m])
		nc.delay = 1
		nc.weight = 1
		nclist.append(nc)
		k=k+1
	}

objref tvec, idvec
proc spikerecord() {local i localobj nc, nil
	
	tvec = new Vector()
	idvec = new Vector()
	for i=0, cells.count-1 {
		nc = cells.object(i).connect2target(nil)
		nc.record(tvec, idvec, nc.srcgid)
	}
}
spikerecord()
/* objref spikematrix, myvec, synrec[650]

spikematrix = new File()

///////////Recording Spikes/////////////////

for n = 0, 649 {   
	if(!pc.gid_exists(n)) { continue } 
		cellid = pc.gid2cell(n)
		cellid.soma synrec[n] = new Exp2Syn(0.9) 
		nc = pc.gid_connect( l,synrec[n])
		nc.delay = 1
		nc.weight = .1
		nclist.append(nc)
	}
	
if(pc.id==0){ //We only want the first host to clear the file
	spikematrix.wopen("mod2data.dat")
	spikematrix.close()
	}
 */


objref spikefile
spikefile = new File("MictParallel.dat")

if(pc.id==0){ //We only want the first host to clear the file
	spikefile.wopen("mod2data.dat")
	spikefile.close()
	}

proc spikeout(){ local i,j, rank

   printf("Writing output spikefile.\n")
	{pc.barrier()} // wait for all hosts to get to this point

	for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.
		if (rank==pc.id) {
		printf("Writing from host: %d | tvec size is: %d \n",rank,tvec.size)
			for i=0, tvec.size-1 {
				spikefile.aopen()
				spikefile.printf("%8.4f\t %d\n", tvec.x[i], idvec.x[i])
				spikefile.close()
			}
		}
		{pc.barrier()} // wait for all hosts to get to this point
		}
	}

pc.set_maxstep(5)
pc.psolve(tstop)
spikeout()
{pc.runworker()}
{pc.done()}


